const Product = require('../models/product');

// ======================
// üìå –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã
// ======================
exports.getAllProducts = async (req, res) => {
    try {
        const products = await Product.findAll();
        res.json(products);
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
};

// ======================
// üìå –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç –ø–æ id
// ======================
exports.getProductById = async (req, res) => {
    try {
        const product = await Product.findByPk(req.params.id);
        if (!product) {
            return res.status(404).json({ error: '–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        res.json(product);
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
};

// ======================
// üìå –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç
// ======================
exports.createProduct = async (req, res) => {
    try {
        const newProduct = await Product.create(req.body);
        res.json(newProduct);
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
};

// ======================
// üìå –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç (—á–µ—Ä–µ–∑ POST /products/update/:id)
// ======================
exports.updateProduct = async (req, res) => {
    try {
        const product = await Product.findByPk(req.params.id);
        if (!product) {
            return res.status(404).json({ error: '–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        await product.update(req.body);
        res.json({ message: '–ü—Ä–æ–¥—É–∫—Ç –æ–±–Ω–æ–≤–ª—ë–Ω', product });
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
};

// ======================
// üìå –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç (—á–µ—Ä–µ–∑ POST /products/delete/:id)
// ======================
exports.deleteProduct = async (req, res) => {
    try {
        const product = await Product.findByPk(req.params.id);
        if (!product) {
            return res.status(404).json({ error: '–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        await product.destroy();
        res.json({ message: '–ü—Ä–æ–¥—É–∫—Ç —É–¥–∞–ª—ë–Ω' });
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
};
